#!/bin/bash
# CREATED BY Bruno

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m' # Reset color

# Helper function for colored messages
print_msg() {
    echo -e "${1}${2}${NC}"
}

#############################
# Check if executed as root #
#############################
if [ "$(id -u)" -ne 0 ]; then
    print_msg "$RED" ">> This script must be run as root."
    exit 1
fi

######################################################
# Get Linux-Distro-Informations from /etc/os-release #
######################################################
if [ -f /etc/os-release ]; then
    . /etc/os-release
    case "$ID" in
        kali|parrot)
            print_msg "$RED" ">> This script does not support $ID Linux. Exiting..."
            exit 1
            ;;
        *)
            print_msg "$BLUE" ">> Detected Linux distribution: $ID"
            ;;
    esac
else
    print_msg "$RED" ">> Error: /etc/os-release not found. Unable to determine the Linux distribution."
    exit 1
fi

#####################################
# Detect package manager function   #
#####################################
detect_package_manager() {
    for manager in apt pacman dnf yum zypper apk; do
        if command -v "$manager" >/dev/null 2>&1; then
            echo "$manager"
            return
        fi
    done
    print_msg "$RED" ">> Unknown package manager. Exiting..."
    exit 1
}

#####################################
# Install Docker and Compose        #
#####################################
install_docker() {
    local package_manager="$1"

    print_msg "$BLUE" ">> Installing Docker and Compose with $package_manager"

    case "$package_manager" in
        apt)
            apt update && apt install -y docker docker-compose
            ;;
        pacman)
            pacman -Suy --noconfirm && pacman -S --noconfirm docker docker-compose
            ;;
        dnf)
            dnf install -y docker-ce docker-compose
            ;;
        zypper)
            zypper install -y docker docker-compose
            ;;
        apk)
            apk add --no-cache docker docker-compose
            rc-update add docker default && /etc/init.d/docker start
            ;;
        *)
            print_msg "$RED" ">> Unsupported package manager: $package_manager"
            exit 1
            ;;
    esac

    systemctl start docker.service || service docker start
    print_msg "$GREEN" ">> Docker and Compose installed successfully."
}

#####################################
# Setup Docker Containers           #
#####################################
setup_containers() {
    local config_file="configuration"
    print_msg "$BLUE" ">> Setting up environment..."
    docker-compose -f docker/base.docker-compose.yml up -d

    if [ ! -f "$config_file" ]; then
        print_msg "$YELLOW" ">> Configuration file not found. Using default settings."
        return
    fi

    source "$config_file"
    declare -A services=(
        ["METASPLOITABLE"]="docker/metasploitable.docker-compose.yml"
        ["JUICESHOP"]="docker/juiceshop.docker-compose.yml"
        ["WINDOWS11"]="docker/windows11.docker-compose.yml"
        ["WINDOWS7e"]="docker/windows7e.docker-compose.yml"
        ["WINDOWS2022"]="docker/windows2022.docker-compose.yml"
    )
    declare -A ports=(
        ["METASPLOITABLE"]="?"
        ["JUICESHOP"]="3000"
        ["WINDOWS11"]="8006"
        ["WINDOWS7e"]="8007"
        ["WINDOWS2022"]="8008"
    )

    for service in "${!services[@]}"; do
        if [[ "${!service}" == "yes" ]]; then
            print_msg "$GREEN" "   -> Starting $service"
            docker-compose -f "${services[$service]}" up -d
            print_msg "$BLUE" "      Access $service -> http://localhost:${ports[$service]}"
        else
            print_msg "$RED" "   -> Skipping $service"
        fi
    done

    print_msg "$GREEN" ">> Setup completed successfully."
}

#################################
# Main script execution         #
#################################
main() {
    local package_manager
    package_manager=$(detect_package_manager)
    install_docker "$package_manager"
    setup_containers
    print_msg "$BLUE" ">> Open your browser and go to 'http://localhost'. If you see the Apache default page, everything is working correctly."
}

main
