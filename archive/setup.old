#!/bin/bash
# CREATED BY Bruno

# define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m' # reset color

#############################
# Check if executed as root #
#############################
if [ "$(id -u)" -ne 0 ]; then
    echo -e "${RED}>> This script must be run as root.${NC}"
    exit 1
fi

######################################################
# Get Linux-Distro-Informations from /etc/os-release #
######################################################
if [ -f /etc/os-release ]; then
    . /etc/os-release

    if [[ "$ID" == "kali" ]]; then
        echo -e "${RED}>> This script does not support Kali Linux. Exiting...${NC}"
        exit 1
    elif [[ "$ID" == "parrot" ]]; then
        echo -e "${RED}>> This script does not support Kali Linux. Exiting...${NC}"
        exit 1
    else
        echo -e "${BLUE} > Detected Linux distribution: ($ID)${NC}"
    fi
else
    echo -e "${RED}>> Error: /etc/os-release not found. Unable to determine the Linux distribution.${NC}"
    exit 1
fi

#####################################
#                                   #
# 		define FUNCTIONS			#
#                                   #
#####################################

# detect system packagemanager
detectPackageManager() {
    if command -v apt >/dev/null 2>&1; then
        echo "apt"
    elif command -v pacman >/dev/null 2>&1; then
        echo "pacman"
    elif command -v dnf >/dev/null 2>&1; then
        echo "dnf"
    elif command -v yum >/dev/null 2>&1; then
        echo "yum"
    elif command -v zypper >/dev/null 2>&1; then
        echo "zypper"
    elif command -v apk >/dev/null 2>&1; then
        echo "apk"
    else
        echo -e "${RED}>> Unknown package manager${NC}"
    fi
}

# definition executionCall()
executionCall() {
    local packageManager="$1"

    #       Installation        #
    #############################
    if [[ "$packageManager" == "apt" ]]; then
        echo -e "${BLUE} > Detected Main Package Manager is apt${NC}"
        echo -e "${BLUE} > Install docker engine ...${NC}"
        apt update && apt install docker -y
        echo -e "${BLUE} > Start docker.service ...${NC}"
        systemctl start docker.service
        echo -e "${BLUE} > Install docker-compose ...${NC}"
        apt install docker-compose -y

    elif [[ "$packageManager" == "pacman" ]]; then
        echo -e "${BLUE} > Detected Main Package Manager is pacman${NC}"
        echo -e "${BLUE} > Install docker engine ...${NC}"
        pacman -Suy
        yes | pacman -S docker
        echo -e "${BLUE} > Start docker.service ...${NC}"
        service docker start && systemctl start docker
        echo -e "${BLUE} > Install docker-compose ...${NC}"
        yes | pacman -S docker-compose

    elif [[ "$packageManager" == "dnf" ]]; then
        echo -e "${BLUE} > Detected Main Package Manager is dnf${NC}"
        echo -e "${BLUE} > Install docker engine ...${NC}"
        dnf install docker-ce -y
        echo -e "${BLUE} > Start docker.service ...${NC}"
        systemctl start docker.service
        echo -e "${BLUE} > Install docker-compose ...${NC}"
        dnf install docker-compose -y

    elif [[ "$packageManager" == "zypper" ]]; then
        echo -e "${BLUE} > Detected Main Package Manager is zypper${NC}"
        echo -e "${BLUE} > Install docker engine ...${NC}"
        zypper install docker -y
        echo -e "${BLUE} > Start docker.service ...${NC}"
        systemctl start docker.service
        echo -e "${BLUE} > Install docker-compose ...${NC}"
        zypper install docker-compose -y

    elif [[ "$packageManager" == "apk" ]]; then
        echo -e "${BLUE} > Detected Main Package Manager is apk${NC}"
        echo -e "${BLUE} > Install docker engine ...${NC}"
        apk add docker -y
        echo -e "${BLUE} > Start docker.service ..."
        rc-update add docker default && /etc/init.d/docker start
        echo -e "${BLUE} > Install docker-compose ...${NC}"
        apk add docker-compose -y

    else
        echo -e "${RED}>> Unsupportet package manager: $packageManager${NC}"
        exit 1
    fi

    echo -e "${BLUE}>> Installation completed"

    #       Containers Management       #
    #####################################
    echo -e "${BLUE} > Setup environment ...${NC}"
    docker-compose -f docker/base.docker-compose.yml up -d

    # define configfile
    CONFIG_FILE="configuration"

    # check if exists
    if [ ! -f "$CONFIG_FILE" ]; then
        echo -e "${YELLOW}>> Fehler: Die Konfigurationsdatei $CONFIG_FILE existiert nicht.${NC}"
        echo -e "${YELLOW}>> Using default configuration ...${NC}"
    else
        # read variables
        source "$CONFIG_FILE"
        echo -e "${BLUE}>> Load Config ...${NC}"

        # set BASE yes -> forced
        echo -e "${GREEN}   -> Basecomponent${NC}"

        # check for METASPLOITABLE
        if [ "$METASPLOITABLE" == "yes" ]; then
            echo -e "${GREEN}   -> Metasploitable${NC}"
            docker-compose -f docker/metasploitable.docker-compose.yml up -d
            echo -e "${BLUE} > Access Metasploitable -> http://localhost:?"
        else
            echo -e "${RED}   -> Metasploitable${NC}"
        fi

        # check for JUICESHOP
        if [ "$JUICESHOP" == "yes" ]; then
            echo -e "${GREEN}   -> Juice-Shop${NC}"
            docker-compose -f docker/juiceshop.docker-compose.yml up -d
            echo -e "${BLUE} > Access Juice-Shop -> http://localhost:3000"
        else
            echo -e "${RED}   -> Juice-Shop${NC}"
        fi

        # check for WINDOWS11
        if [ "$WINDOWS11" == "yes" ]; then
            echo -e "${GREEN}   -> Windows11${NC}"
            docker-compose -f docker/windows11.docker-compose.yml up -d
            echo -e "${BLUE} > Access Windows 11 -> http://localhost:8006"
        else
            echo -e "${RED}   -> Windows 11${NC}"
        fi

        # check for WINDOWS7e
        if [ "$WINDOWS7e" == "yes" ]; then
            echo -e "${GREEN}   -> Windows11${NC}"
            docker-compose -f docker/windows7e.docker-compose.yml up -d
            echo -e "${BLUE} > Access Windows 7 enterprise -> http://localhost:8007"
        else
            echo -e "${RED}   -> Windows 7 enterprise${NC}"
        fi
        
        # check for WINDOWS2022
        if [ "$WINDOWS2022" == "yes" ]; then
            echo -e "${GREEN}   -> Windows Server 2022${NC}"
            docker-compose -f docker/windows2022.docker-compose.yml up -d
            echo -e "${BLUE} > Access Windows Server 2022 -> http://localhost:8008"
        else
            echo -e "${RED}   -> Windows Server 2022${NC}"
        fi
    fi

    echo " "
    echo -e "${GREEN}>> Setup completed${NC}"
}

#################################
#                               #
#		Execute Script			#
#                               #
#################################

executionCall $(detectPackageManager)
echo -e "${BLUE} > Open your browser and go to 'http://localhost'. If you see the Apache default page, everything is working correctly.${NC}"

# CREATED BY Bruno
