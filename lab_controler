#!/bin/bash

# Farben für das Menü
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m' # Reset Farbe

# Helper function for colored messages
print_msg() {
    echo -e "${1}${2}${NC}"
}

#############################
# Check if executed as root #
#############################
if [ "$(id -u)" -ne 0 ]; then
    print_msg "$RED" ">> This script must be run as root."
    exit 1
fi

# Helper function to show the content of the configuration file in a formatted way
show_configuration() {
    local config_file="configuration.yaml"
    
    if [ -f "$config_file" ]; then
        print_msg "$BLUE" ">> Showing content of $config_file:"

        # Iterate over services in the configuration file
        services=$(yq e '.services' "$config_file")
        for service in $(echo "$services" | yq e 'keys' -); do
            status=$(yq e ".services.$service" "$config_file")
            port=$(yq e ".ports.$service" "$config_file")
            
            # Check service status and print it
            if [ "$status" == "yes" ]; then
                print_msg "$GREEN" "$service: aktiv - Port: $port"
            else
                print_msg "$RED" "$service: inaktiv"
            fi
        done

        print_msg "$GREEN" ">> Configuration file is located at: $(realpath $config_file)"
    else
        print_msg "$RED" ">> Configuration file not found."
    fi
    
    read -p "Press Enter to return to the menu"
}

# Funktion für das Menü
show_menu() {
    clear
    print_msg "$BLUE" "===================================="
    print_msg "$YELLOW" "         Welcome to the Laboratory"
    print_msg "$BLUE" "===================================="
    print_msg "$NC" "Please choose an option:"
    print_msg "$GREEN" "1) Setup project - (only run at first start)"
    print_msg "$GREEN" "2) Start Laboratory"
    print_msg "$GREEN" "3) Stop Laboratory"
    print_msg "$GREEN" "4) Show Configuration"
    print_msg "$GREEN" "5) Exit Laboratory"
    print_msg "$BLUE" "===================================="
}

# Funktion für Experiment 1
setup_call() {
    print_msg "$YELLOW" ">> Setup project..."
    ./components/setup
    print_msg "$GREEN" ">> Setup completed!"
    read -p "Press Enter to return to the menu."
}

# Funktion für Experiment 2
start_call() {
    print_msg "$YELLOW" ">> Starting Laboratory ..."
    ./components/start
    print_msg "$GREEN" ">> Completed!"
    read -p "Press Enter to return to the menu."
}

# Funktion zum Überprüfen des Equipment-Status
stop_call() {
    print_msg "$YELLOW" ">> Stopping Laboratory ..."
    ./components/stop
    print_msg "$GREEN" ">> All container stopped!"
    read -p "Press Enter to return to the menu"
}

# Hauptfunktion
main_menu() {
    chmod +x ./components/start ./components/stop ./components/setup
    while true; do
        show_menu
        read -p "Enter your choice [1-5]: " choice
        case $choice in
            1) setup_call ;;
            2) start_call ;;
            3) stop_call ;;
            4) show_configuration ;;
            5) 
                print_msg "$RED" "Exiting the Laboratory. Goodbye!"
                break
                ;;
            *)
                print_msg "$RED" "Invalid choice. Please select a valid option."
                sleep 2
                ;;
        esac
    done
}

# Skript starten
main_menu
