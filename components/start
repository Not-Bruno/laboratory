#!/bin/bash
# CREATED BY Bruno

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m' # Reset color

# Helper function for colored messages
print_msg() {
    echo -e "${1}${2}${NC}"
}

#############################
# Check if executed as root #
#############################
if [ "$(id -u)" -ne 0 ]; then
    print_msg "$RED" ">> This script must be run as root."
    exit 1
fi

#####################################
# Setup Docker Containers           #
#####################################
start_containers() {
    local config_file="./components/configuration.yaml"
    print_msg "$BLUE" ">> Starting environment..."

    # check if file exists
    if [ ! -f "$config_file" ]; then
        print_msg "$RED" ">> Error: Configuration file not found at $config_file."
        exit 1
    fi

    # check for yq installation
    if ! command -v yq &>/dev/null; then
        print_msg "$RED" ">> Error: yq is not installed. Please run 'setup' and try again."
        exit 1
    fi

    # Read services and ports from YAML file
    declare -A services=(
        ["metasploitable"]=$(yq eval '.services.metasploitable' "$config_file")
        ["juice-shop"]=$(yq eval '.services.juice-shop' "$config_file")
        ["windows11"]=$(yq eval '.services.windows11' "$config_file")
        ["windows7e"]=$(yq eval '.services.windows7e' "$config_file")
        ["windows2022"]=$(yq eval '.services.windows2022' "$config_file")
    )

    declare -A ports=(
        ["metasploitable"]=$(yq eval '.ports.metasploitable' "$config_file")
        ["juice-shop"]=$(yq eval '.ports.juice-shop' "$config_file")
        ["windows11"]=$(yq eval '.ports.windows11' "$config_file")
        ["windows7e"]=$(yq eval '.ports.windows7e' "$config_file")
        ["windows2022"]=$(yq eval '.ports.windows2022' "$config_file")
    )

    declare -A compose_files=(
        ["metasploitable"]="metasploitable.docker-compose.yml"
        ["juice-shop"]="juice-shop.docker-compose.yml"
        ["windows11"]="windows11.docker-compose.yml"
        ["windows7e"]="windows7e.docker-compose.yml"
        ["windows2022"]="windows2022.docker-compose.yml"
    )

    # start Base-Docker-Container
    if [ -f docker/basecomponent.docker-compose.yml ]; then
        docker-compose -f docker/basecomponent.docker-compose.yml up -d
        print_msg "$GREEN" ">> Base component started successfully."
    else
        print_msg "$YELLOW" ">> Warning: Base component configuration file not found. Exiting ..."
        exit 1
    fi

    # Start activated Container
    for service in "${!services[@]}"; do
        if [[ "${services[$service]}" == "yes" ]]; then
            if [ -f "${compose_files[$service]}" ]; then
                print_msg "$GREEN" "   -> Starting $service"
                docker-compose -f "docker/${compose_files[$service]}" up -d
                print_msg "$BLUE" "[>] Access $service -> http://localhost:${ports[$service]}"
            else
                print_msg "$YELLOW" "   -> Warning: Docker Compose file for $service not found. Skipping $service"
            fi
        else
            print_msg "$RED" "   -> Skipping $service"
        fi
    done

    print_msg "$GREEN" ">> Environment started successfully."
}

#################################
# Main script execution         #
#################################
main() {
    start_containers
}

main # entrypoint
