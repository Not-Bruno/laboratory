#!/bin/bash
# CREATED BY Bruno

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m' # Reset color

# Helper function for colored messages
print_msg() {
    echo -e "${1}${2}${NC}"
}

#############################
# Check if executed as root #
#############################
if [ "$(id -u)" -ne 0 ]; then
    print_msg "$RED" ">> This script must be run as root."
    exit 1
fi

#####################################
# Setup Docker Containers           #
#####################################
setup_containers() {
    local config_file="configuration"
    print_msg "$BLUE" ">> Setting up environment..."
    docker-compose -f docker/base.docker-compose.yml up -d --remove-orphans

    if [ ! -f "$config_file" ]; then
        print_msg "$YELLOW" ">> Configuration file not found. Using default settings."
        return
    fi

    source "$config_file"
    declare -A services=(
        ["METASPLOITABLE"]="docker/metasploitable.docker-compose.yml"
        ["JUICESHOP"]="docker/juiceshop.docker-compose.yml"
        ["WINDOWS11"]="docker/windows11.docker-compose.yml"
        ["WINDOWS7e"]="docker/windows7e.docker-compose.yml"
        ["WINDOWS2022"]="docker/windows2022.docker-compose.yml"
    )
    declare -A ports=(
        ["METASPLOITABLE"]="?"
        ["JUICESHOP"]="3000"
        ["WINDOWS11"]="8006"
        ["WINDOWS7e"]="8007"
        ["WINDOWS2022"]="8008"
    )

    for service in "${!services[@]}"; do
        if [[ "${!service}" == "yes" ]]; then
            print_msg "$GREEN" "   -> Starting $service"
            docker-compose -f "${services[$service]}" up -d --remove-orphans
            print_msg "$BLUE" "[>] Access $service -> http://localhost:${ports[$service]}"
        else
            print_msg "$RED" "   -> Skipping $service"
        fi
    done

    print_msg "$GREEN" ">> Setup completed successfully."
}

#################################
# Wait for exit command         #
#################################
wait_for_exit() {
    while true; do
        chmod +x ./stop
        read -p "Type 'exit' to stop all containers and close the script: " input
        if [[ "$input" == "exit" ]]; then
            ./stop
            break
        else
            print_msg "$YELLOW" ">> Unknown command. Type 'exit' to quit."
        fi
    done
}

#################################
# Main script execution         #
#################################
main() {
    setup_containers
    wait_for_exit
}

main # entrypoint
